AWSTemplateFormatVersion: 2010-09-09
Description: This template makes resources for assignment 4
Parameters:
  S3BucketName:
    Type: String
    Default: cf-static-webpage-psg1
  UIFileName:
    Type: String
    Default: index.html
  RestApiName:
    Type: String
    Default: task
  RdsDatabseName:
    Type: String
    Default: another_db
  SecretName:
    Type: String
    Default: MySecret
  CodeBucket:
    Type: String
    Default: cf-code-bucket-psg1
  LambdaKey:
    Type: String
    Default: lambda-function.zip
  LambdaHandler:
    Type: String
    Default: lambda-function.handler
  LambdaKey1:
    Type: String
    Default: rds_lambda.zip
  LambdaHandler1:
    Type: String
    Default: rds_lambda.handler
  LambdaLayerFile:
    Type: String
    Default: python.zip
  LambdaLayerName:
    Type: String
    Default: task4
  LambdaFunctionName:
    Type: String
    Default: rds-lambda-write
  ApiGatewayStageName:
    Type: String
    Default: Test
  Subnets:
    Type: List<String>
  VpcId:
    Type: String

Resources:
  WebsiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref S3BucketName
      WebsiteConfiguration:
        IndexDocument: !Ref UIFileName
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  Secretm:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Ref SecretName
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "subnet group for rds"
      SubnetIds: !Ref Subnets
  MySQLInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceClass: 'db.t3.micro'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      DBName: !Ref RdsDatabseName
      Engine: "MySQL"
      EngineVersion: "8.0.40"
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref Secretm, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref Secretm, ':SecretString:password}}' ] ]
      StorageType: gp2
      AllocatedStorage: 20
    #DeletionPolicy: Snapshot
    #UpdateReplacePolicy: Snapshot
  SecretRDSInstanceAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId: !Ref Secretm
      TargetId: !Ref MySQLInstance
      TargetType: AWS::RDS::DBInstance
  SecrityGroupLambda:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow lambda outbound traffic
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow mysql inbound traffic
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt SecrityGroupLambda.GroupId
      VpcId: !Ref VpcId
  RestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Ref RestApiName
  RestApiMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
      ResourceId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi
  RestApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref ApiGatewayStageName
    DependsOn: RestApiMethod
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/"
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "Rds-get-function-psg"
      Role: !GetAtt IAM.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Ref LambdaKey
      Environment:
        Variables:
          secret: !Ref SecretName
      Runtime: python3.13
      Handler: !Ref LambdaHandler
      Layers:
        - !Ref LambdaLayer
      Timeout: 90
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SecrityGroupLambda.GroupId
        SubnetIds: !Ref Subnets
  InitialRdsFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Role: !GetAtt IAM.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Ref LambdaKey1
      Environment:
        Variables:
          secret: !Ref SecretName
      Runtime: python3.13
      Handler: !Ref LambdaHandler1
      Layers:
        - !Ref LambdaLayer
      Timeout: 90
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt SecrityGroupLambda.GroupId
        SubnetIds: !Ref Subnets
  LambdaLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python3.13
      Content:
        S3Bucket: !Ref CodeBucket
        S3Key: !Ref LambdaLayerFile
      LayerName: !Ref LambdaLayerName
  VpcEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      SubnetIds: !Ref Subnets
      VpcEndpointType: Interface
      VpcId: !Ref VpcId
  IAM:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "cf-a4-sm-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "cf-assign4-sm-lambda-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource: !Ref Secretm
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
Outputs:
  ApiGatewayEndpoint:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}/"